<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Evolution2</name></assembly>
<members>
<member name="M:Program.main(System.String[])">
 <summary>
 The Main method for the application.
 </summary>
 <param name="args">A list of command line arguments</param>
</member>
<member name="M:Program.IO.writeHomologousResults(System.String)">
 <summary>
 Writes the homologous gene tracking results to file.
 </summary>
 <param name="filename">A file path/filename</param>
</member>
<member name="M:Program.IO.writeResults(System.String)">
 <summary>
 Writes the evolution results to file.
 </summary>
 <param name="filename">A file path/filename</param>
</member>
<member name="M:Program.IO.readLines(System.String)">
 <summary>
 Reads the input file and adds each line to a list
 of strings.
 </summary>
 <param name="path">A file path/filename</param>
 <returns>A sequence containing all lines from file</returns>
</member>
<member name="T:Program.IO">
 <summary>
 This module contains the I/O operations.
 </summary>   
</member>
<member name="M:Program.Events.toHomolog(Microsoft.FSharp.Collections.FSharpList{System.Tuple{System.Int32,System.Int32}})">
 <summary>
 Formats the homologous gene tracking results.
 </summary>
 <param name="genes">The result list</param>
 <returns>A list of homologous genes</returns> 
</member>
<member name="M:Program.Events.homologous(System.Collections.Generic.List{Program.DNA.Nucleotide})">
 <summary>
 Tracks homologous genes.
 </summary>
 <param name="gene">The sequence of nucleotides to be compared</param>
 <returns>A list of homologous genes</returns> 
</member>
<member name="M:Program.Events.events(Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 Different types of events which alter existing genes
 in various ways.
 </summary>
 <param name="action">An array containing events</param> 
</member>
<member name="M:Program.Events.valid(Microsoft.FSharp.Collections.FSharpList{System.String})">
 <summary>
 Checks from the event if the specified gene exists 
 in the gene dictionary.
 </summary>
 <param name="event">A list containing an event</param>
 <returns>True if the specified gene exists in the gene dictionary,
 false otherwise</returns>
</member>
<member name="M:Program.Events.speciation(System.Int32,System.Int32)">
 <summary>
 Creates a new species from an existing species.
 </summary>
 <param name="species1">An integer representing the new species
 to be created</param>
 <param name="species2">An integer representing the existing species 
 to be copied</param> 
</member>
<member name="M:Program.Events.fusion(System.Int32,System.Int32,System.Int32)">
 <summary>
 Fuses two existing genes to create a new gene.
 </summary>
 <param name="species">An integer representing a species ID</param>
 <param name="gene1">An integer representing the gene to be fused</param>
 <param name="gene2">An integer representing the gene to be removed</param>
</member>
<member name="M:Program.Events.fission(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Splits an existing gene into 2 genes.
 </summary>
 <param name="species">An integer representing a species ID</param>
 <param name="gene1">An integer representing the gene to be created</param>
 <param name="gene2">An integer representing the gene to be split</param>
 <param name="index">An integer representing the spliting index</param>
</member>
<member name="M:Program.Events.loss(System.Int32,System.Int32)">
 <summary>
 Removes an existing gene from an existing species.
 </summary>
 <param name="species">An integer representing a species ID</param>
 <param name="gene">An integer representing a gene ID</param>
</member>
<member name="M:Program.Events.duplicate(System.Int32,System.Int32,System.Int32)">
 <summary>
 Adds a new gene to an existing species that is an exact
 copy of another gene within the same species.
 </summary>
 <param name="species">An integer representing a species ID</param>
 <param name="gene1">An integer representing the gene to be added</param>
 <param name="gene2">An integer representing the gene to be copied</param>
</member>
<member name="M:Program.Events.delete(System.Int32,System.Int32,System.Int32,System.Int32)">
 <summary>
 Deletes a section of DNA from an existing gene.
 </summary>
 <param name="species">An integer representing a species ID</param>
 <param name="gene">An integer representing a gene ID</param>
 <param name="index">An index to start the delete operation</param>
 <param name="length">Length of the section to be deleted</param>
</member>
<member name="M:Program.Events.insert(System.Int32,System.Int32,System.Int32,System.String)">
 <summary>
 Inserts a new sequence of DNA to an existing gene.
 </summary>
 <param name="species">An integer representing a species ID</param>
 <param name="gene">An integer representing a gene ID</param>
 <param name="index">An integer representing the index to be inserted</param>
 <param name="dna">A string representing a sequence of DNA</param>
</member>
<member name="M:Program.Events.snip(System.Int32,System.Int32,System.Int32,System.String)">
 <summary>
 A single nucleotide polymorphism (SNP).
 Replaces a single nucleobase (or nucleotide) within
 an existing gene with a different nucleobase.
 </summary>
 <param name="species">An integer representing a species ID</param>
 <param name="gene">An integer representing a gene ID</param>
 <param name="index">An integer representing the index of 
 nucleobase to be replaced</param>
 <param name="dna">A string representing a single nucleobase</param>
</member>
<member name="M:Program.Events.create(System.Int32,System.Int32,System.String)">
 <summary>
 Creates a new gene and adds it to the gene list.
 </summary>
 <param name="species">An integer representing a species ID</param>
 <param name="gene">An integer representing a gene ID</param>
 <param name="dna">A string representing a sequence of DNA</param>
</member>
<member name="T:Program.Events">
 <summary>
 This module contains the evolution events.
 </summary>
</member>
<member name="M:Program.Utilities.Int(System.String)">
 <summary>
 Parses a string to an integer.
 </summary>
 <param name="str">A string</param>
 <returns>An integer</returns>         
</member>
<member name="T:Program.Utilities">
 <summary>
 This module contains the helper functions used in
 the evolution events.
 </summary>
</member>
<member name="P:Program.World.homologousGenes">
 <summary>
 A dictionary containing the homologous gene tracking results.
 </summary>
</member>
<member name="P:Program.World.genes">
 <summary>
 A dictionary containing genes.
 </summary>
</member>
<member name="T:Program.World">
 <summary>
 This module contains a dictionary of all
 genes in the world
 </summary>
</member>
<member name="T:Program.DNA.ParsedChar">
 <summary>
 A single case union type of nucleobases after being parsed.
 </summary>
</member>
<member name="T:Program.DNA.Nucleobase">
 <summary>
 A single case union type of nucleobases, including 
 A (Adenine), C (Cytosine), G (Guanine) and T (Thymine).
 A nucleobase is not just any character, therefore it has
 to be from a limited set.
 </summary>
</member>
<member name="M:Program.DNA.findCommon(System.Collections.Generic.List{Program.DNA.Nucleotide},System.Collections.Generic.List{Program.DNA.Nucleotide})">
 <summary>
 Finds common elements between two sequences of nucleotides.
 </summary>
 <param name="nucleotide1">A sequence of nucleotides</param>
 <param name="nucleotide2">A sequence of nucleotides</param>
 <returns>A list of common nucleotides</returns>  
</member>
<member name="M:Program.DNA.copy(System.Collections.Generic.IEnumerable{Program.DNA.Nucleotide})">
 <summary>
 Copies a sequence of nucleotides.
 </summary>
 <param name="nucleotides">A sequence of nucleotides</param>
 <returns>A new sequence of nucleotides</returns>   
</member>
<member name="M:Program.DNA.toDNAString(System.Collections.Generic.IEnumerable{Program.DNA.Nucleotide})">
 <summary>
 Converts a list of nucleotides to a string.
 </summary>
 <param name="nucleotides">A sequence of nucleotides</param>
 <returns>A string representing a sequence of nucleotides</returns>
</member>
<member name="M:Program.DNA.toNucleotides(System.String,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Collections.FSharpList{Program.DNA.Nucleobase})">
 <summary>
 Construct a list of nucleotides.
 </summary>
 <param name="evt">A string representing an event</param>
 <param name="org">A tuple representing an origin</param>
 <param name="pos">An integer representing a position</param>
 <param name="dna">A nucleobase</param>
 <returns>A list of necleotides</returns>
</member>
<member name="M:Program.DNA.toNucleotideList(System.Collections.Generic.IEnumerable{Program.DNA.Nucleotide})">
 <summary>
 Transfer a sequence of nucleotides to a list of nucleotides.
 </summary>
 <param name="nucleotides">A sequence of nucleotides</param>
 <returns>A list of nucleotides</returns>
</member>
<member name="M:Program.DNA.newNucleotide(System.String,System.Int32,System.Int32,System.Int32,Program.DNA.Nucleobase)">
 <summary>
 Construct a nucleotide record.
 </summary>
 <param name="evt">A string representing an event</param>
 <param name="org">A tuple representing an origin</param>
 <param name="pos">An integer representing a position</param>
 <param name="dna">A nucleobase</param>
 <returns>A new necleotide record</returns>
</member>
<member name="M:Program.DNA.updateIndex(System.Int32,Microsoft.FSharp.Collections.FSharpList{Program.DNA.Nucleotide})">
 <summary>
 Updates each nucleotide's position starting from
 the given index.
 </summary>
 <param name="index">The starting index</param>
 <returns>A list of nucleotides with updated positions</returns> 
</member>
<member name="M:Program.DNA.toDNA(System.String)">
 <summary>
 A top-level function to converts a string representing a
 sequence of DNA to a list of valid bases by filtering out 
 all the invalid bases.
 </summary>
 <param name="str">A string representing a sequence of DNA</param>
 <returns>A list containing a sequence of DNA</returns> 
</member>
<member name="M:Program.DNA.toNucleobaseList(System.String)">
 <summary>
 Converts a string of nucleobases to a list.
 </summary>
 <param name="str">A string representing a sequence of DNA</param>
 <returns>A list containing a sequence of DNA</returns> 
</member>
<member name="M:Program.DNA.charToNucleobase(System.Char)">
 <summary>
 Parses a character to a nucleobase.
 This function parses a valid character into the ValidBase type
 and an invalid character to the Invalidbase type. 
 </summary>
 <param name="ch">A character representing a single nucleobase</param>
 <returns>A valid or invalid nucleobase</returns>  
</member>
<member name="M:Program.DNA.toString(System.Collections.Generic.IEnumerable{Program.DNA.Nucleobase})">
 <summary>
 Converts a list of nucleobases to a string.
 </summary>
 <param name="dnaList">A list containing a sequence of DNA</param>
 <returns>A string representing a sequence of DNA</returns>    
</member>
<member name="M:Program.DNA.nucleobaseToChar(Program.DNA.Nucleobase)">
 <summary>
 Parses a nucleobase to a character.
 </summary>
 <param name="nucleobase">A single nucleobase</param>
 <returns>A character representing the input nucleobase</returns>    
</member>
<member name="T:Program.DNA">
 <summary>
 This module contains the DNA-related functions.
 </summary>
</member>
</members>
</doc>
